
import { collection, getDocs, doc, getDoc, query, where, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';
import { getFirestore } from 'firebase/firestore';
import { app } from './firebase';

export interface Order {
    id: string;
    userId: string;
    customer: string;
    date: string;
    status: 'Fulfilled' | 'Pending' | 'Cancelled' | 'Shipped' | 'Processing';
    total: string;
    items: { name: string; quantity: number }[];
    createdAt?: string;
}

// Type for creating a new order, ID is generated by Firestore
type NewOrder = Omit<Order, 'id' | 'createdAt'>;

const db = getFirestore(app);
const ordersCollection = collection(db, 'orders');

const convertOrderTimestamps = (doc: any) => {
    const data = doc.data();
    if (data.createdAt && typeof data.createdAt.toDate === 'function') {
        data.createdAt = data.createdAt.toDate().toISOString();
    }
    return { id: doc.id, ...data } as Order;
}


export async function getOrders(): Promise<Order[]> {
  const querySnapshot = await getDocs(ordersCollection);
  return querySnapshot.docs.map(convertOrderTimestamps);
}

export async function getOrderById(id: string): Promise<Order | undefined> {
    const docRef = doc(db, "orders", id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      return convertOrderTimestamps(docSnap);
    }
    return undefined;
}

export async function getOrdersByUserId(userId: string): Promise<Order[]> {
    const q = query(ordersCollection, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(convertOrderTimestamps);
}

export async function createOrder(orderData: NewOrder): Promise<string> {
    const docRef = await addDoc(ordersCollection, {
        ...orderData,
        createdAt: serverTimestamp() // Optional: for sorting by creation time
    });
    return docRef.id;
}
