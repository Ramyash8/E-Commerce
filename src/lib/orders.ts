
import { collection, getDocs, doc, getDoc, query, where, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';
import { getFirestore } from 'firebase/firestore';
import { app } from './firebase';
import type { Order as DbOrder } from './db/orders';

// The Order type used throughout the app
export interface Order extends Omit<DbOrder, 'id'> {
    id: string;
    createdAt?: Timestamp | string;
}

// Type for creating a new order, ID is generated by Firestore
type NewOrder = Omit<Order, 'id' | 'createdAt'>;

const db = getFirestore(app);
const ordersCollection = collection(db, 'orders');

export async function getOrders(): Promise<Order[]> {
  const querySnapshot = await getDocs(ordersCollection);
  return querySnapshot.docs.map(doc => {
    const data = doc.data();
    // Convert Firestore Timestamp to a serializable format (ISO string)
    if (data.createdAt && typeof data.createdAt.toDate === 'function') {
        data.createdAt = data.createdAt.toDate().toISOString();
    }
    return { id: doc.id, ...data } as Order;
  });
}

export async function getOrderById(id: string): Promise<Order | undefined> {
    const docRef = doc(db, "orders", id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      const data = docSnap.data();
       if (data.createdAt && typeof data.createdAt.toDate === 'function') {
        data.createdAt = data.createdAt.toDate().toISOString();
      }
      return { id: docSnap.id, ...data } as Order;
    }
    return undefined;
}

export async function getOrdersByUserId(userId: string): Promise<Order[]> {
    const q = query(ordersCollection, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => {
         const data = doc.data();
        if (data.createdAt && typeof data.createdAt.toDate === 'function') {
            data.createdAt = data.createdAt.toDate().toISOString();
        }
        return { id: doc.id, ...data } as Order;
    });
}

export async function createOrder(orderData: NewOrder): Promise<string> {
    const docRef = await addDoc(ordersCollection, {
        ...orderData,
        createdAt: serverTimestamp() // Optional: for sorting by creation time
    });
    return docRef.id;
}
